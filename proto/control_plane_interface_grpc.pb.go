// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: control_plane_interface.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CpiInterfaceClient is the client API for CpiInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CpiInterfaceClient interface {
	SetInvocationsMetrics(ctx context.Context, in *AutoscalingMetric, opts ...grpc.CallOption) (*ActionStatus, error)
	SetBackgroundMetrics(ctx context.Context, in *MetricsPredictiveAutoscaler, opts ...grpc.CallOption) (*ActionStatus, error)
	ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceList, error)
	HasService(ctx context.Context, in *ServiceIdentifier, opts ...grpc.CallOption) (*HasServiceResult, error)
	RegisterDataplane(ctx context.Context, in *DataplaneInfo, opts ...grpc.CallOption) (*ActionStatus, error)
	RegisterService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*ActionStatus, error)
	RegisterWorkflow(ctx context.Context, in *WorkflowInfo, opts ...grpc.CallOption) (*ActionStatus, error)
	RegisterNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeRegistrationStatus, error)
	NodeHeartbeat(ctx context.Context, in *NodeHeartbeatMessage, opts ...grpc.CallOption) (*ActionStatus, error)
	ReportFailure(ctx context.Context, in *Failure, opts ...grpc.CallOption) (*ActionStatus, error)
	DeregisterDataplane(ctx context.Context, in *DataplaneInfo, opts ...grpc.CallOption) (*ActionStatus, error)
	DeregisterNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeRegistrationStatus, error)
	DeregisterService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*ActionStatus, error)
	DeregisterWorkflow(ctx context.Context, in *WorkflowObjectIdentifier, opts ...grpc.CallOption) (*ActionStatus, error)
	ResetMeasurements(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActionStatus, error)
	// RAFT leader election
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error)
	// HAProxy
	ReviseHAProxyConfiguration(ctx context.Context, in *HAProxyConfig, opts ...grpc.CallOption) (*ActionStatus, error)
}

type cpiInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewCpiInterfaceClient(cc grpc.ClientConnInterface) CpiInterfaceClient {
	return &cpiInterfaceClient{cc}
}

func (c *cpiInterfaceClient) SetInvocationsMetrics(ctx context.Context, in *AutoscalingMetric, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/SetInvocationsMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) SetBackgroundMetrics(ctx context.Context, in *MetricsPredictiveAutoscaler, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/SetBackgroundMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) HasService(ctx context.Context, in *ServiceIdentifier, opts ...grpc.CallOption) (*HasServiceResult, error) {
	out := new(HasServiceResult)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/HasService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) RegisterDataplane(ctx context.Context, in *DataplaneInfo, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/RegisterDataplane", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) RegisterService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) RegisterWorkflow(ctx context.Context, in *WorkflowInfo, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/RegisterWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) RegisterNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeRegistrationStatus, error) {
	out := new(NodeRegistrationStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) NodeHeartbeat(ctx context.Context, in *NodeHeartbeatMessage, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/NodeHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) ReportFailure(ctx context.Context, in *Failure, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/ReportFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) DeregisterDataplane(ctx context.Context, in *DataplaneInfo, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/DeregisterDataplane", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) DeregisterNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeRegistrationStatus, error) {
	out := new(NodeRegistrationStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/DeregisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) DeregisterService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/DeregisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) DeregisterWorkflow(ctx context.Context, in *WorkflowObjectIdentifier, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/DeregisterWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) ResetMeasurements(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/ResetMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error) {
	out := new(AppendEntriesReply)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpiInterfaceClient) ReviseHAProxyConfiguration(ctx context.Context, in *HAProxyConfig, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, "/data_plane.CpiInterface/ReviseHAProxyConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CpiInterfaceServer is the server API for CpiInterface service.
// All implementations must embed UnimplementedCpiInterfaceServer
// for forward compatibility
type CpiInterfaceServer interface {
	SetInvocationsMetrics(context.Context, *AutoscalingMetric) (*ActionStatus, error)
	SetBackgroundMetrics(context.Context, *MetricsPredictiveAutoscaler) (*ActionStatus, error)
	ListServices(context.Context, *emptypb.Empty) (*ServiceList, error)
	HasService(context.Context, *ServiceIdentifier) (*HasServiceResult, error)
	RegisterDataplane(context.Context, *DataplaneInfo) (*ActionStatus, error)
	RegisterService(context.Context, *ServiceInfo) (*ActionStatus, error)
	RegisterWorkflow(context.Context, *WorkflowInfo) (*ActionStatus, error)
	RegisterNode(context.Context, *NodeInfo) (*NodeRegistrationStatus, error)
	NodeHeartbeat(context.Context, *NodeHeartbeatMessage) (*ActionStatus, error)
	ReportFailure(context.Context, *Failure) (*ActionStatus, error)
	DeregisterDataplane(context.Context, *DataplaneInfo) (*ActionStatus, error)
	DeregisterNode(context.Context, *NodeInfo) (*NodeRegistrationStatus, error)
	DeregisterService(context.Context, *ServiceInfo) (*ActionStatus, error)
	DeregisterWorkflow(context.Context, *WorkflowObjectIdentifier) (*ActionStatus, error)
	ResetMeasurements(context.Context, *emptypb.Empty) (*ActionStatus, error)
	// RAFT leader election
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error)
	// HAProxy
	ReviseHAProxyConfiguration(context.Context, *HAProxyConfig) (*ActionStatus, error)
	mustEmbedUnimplementedCpiInterfaceServer()
}

// UnimplementedCpiInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedCpiInterfaceServer struct {
}

func (UnimplementedCpiInterfaceServer) SetInvocationsMetrics(context.Context, *AutoscalingMetric) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInvocationsMetrics not implemented")
}
func (UnimplementedCpiInterfaceServer) SetBackgroundMetrics(context.Context, *MetricsPredictiveAutoscaler) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBackgroundMetrics not implemented")
}
func (UnimplementedCpiInterfaceServer) ListServices(context.Context, *emptypb.Empty) (*ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedCpiInterfaceServer) HasService(context.Context, *ServiceIdentifier) (*HasServiceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasService not implemented")
}
func (UnimplementedCpiInterfaceServer) RegisterDataplane(context.Context, *DataplaneInfo) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDataplane not implemented")
}
func (UnimplementedCpiInterfaceServer) RegisterService(context.Context, *ServiceInfo) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedCpiInterfaceServer) RegisterWorkflow(context.Context, *WorkflowInfo) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorkflow not implemented")
}
func (UnimplementedCpiInterfaceServer) RegisterNode(context.Context, *NodeInfo) (*NodeRegistrationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedCpiInterfaceServer) NodeHeartbeat(context.Context, *NodeHeartbeatMessage) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeHeartbeat not implemented")
}
func (UnimplementedCpiInterfaceServer) ReportFailure(context.Context, *Failure) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportFailure not implemented")
}
func (UnimplementedCpiInterfaceServer) DeregisterDataplane(context.Context, *DataplaneInfo) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterDataplane not implemented")
}
func (UnimplementedCpiInterfaceServer) DeregisterNode(context.Context, *NodeInfo) (*NodeRegistrationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterNode not implemented")
}
func (UnimplementedCpiInterfaceServer) DeregisterService(context.Context, *ServiceInfo) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterService not implemented")
}
func (UnimplementedCpiInterfaceServer) DeregisterWorkflow(context.Context, *WorkflowObjectIdentifier) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterWorkflow not implemented")
}
func (UnimplementedCpiInterfaceServer) ResetMeasurements(context.Context, *emptypb.Empty) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMeasurements not implemented")
}
func (UnimplementedCpiInterfaceServer) RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedCpiInterfaceServer) AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedCpiInterfaceServer) ReviseHAProxyConfiguration(context.Context, *HAProxyConfig) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviseHAProxyConfiguration not implemented")
}
func (UnimplementedCpiInterfaceServer) mustEmbedUnimplementedCpiInterfaceServer() {}

// UnsafeCpiInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CpiInterfaceServer will
// result in compilation errors.
type UnsafeCpiInterfaceServer interface {
	mustEmbedUnimplementedCpiInterfaceServer()
}

func RegisterCpiInterfaceServer(s grpc.ServiceRegistrar, srv CpiInterfaceServer) {
	s.RegisterService(&CpiInterface_ServiceDesc, srv)
}

func _CpiInterface_SetInvocationsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoscalingMetric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).SetInvocationsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/SetInvocationsMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).SetInvocationsMetrics(ctx, req.(*AutoscalingMetric))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_SetBackgroundMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsPredictiveAutoscaler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).SetBackgroundMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/SetBackgroundMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).SetBackgroundMetrics(ctx, req.(*MetricsPredictiveAutoscaler))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).ListServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_HasService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).HasService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/HasService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).HasService(ctx, req.(*ServiceIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_RegisterDataplane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataplaneInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).RegisterDataplane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/RegisterDataplane",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).RegisterDataplane(ctx, req.(*DataplaneInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).RegisterService(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_RegisterWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).RegisterWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/RegisterWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).RegisterWorkflow(ctx, req.(*WorkflowInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).RegisterNode(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_NodeHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHeartbeatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).NodeHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/NodeHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).NodeHeartbeat(ctx, req.(*NodeHeartbeatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_ReportFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Failure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).ReportFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/ReportFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).ReportFailure(ctx, req.(*Failure))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_DeregisterDataplane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataplaneInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).DeregisterDataplane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/DeregisterDataplane",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).DeregisterDataplane(ctx, req.(*DataplaneInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_DeregisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).DeregisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/DeregisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).DeregisterNode(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_DeregisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).DeregisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/DeregisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).DeregisterService(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_DeregisterWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowObjectIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).DeregisterWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/DeregisterWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).DeregisterWorkflow(ctx, req.(*WorkflowObjectIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_ResetMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).ResetMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/ResetMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).ResetMeasurements(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).AppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpiInterface_ReviseHAProxyConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HAProxyConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpiInterfaceServer).ReviseHAProxyConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.CpiInterface/ReviseHAProxyConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpiInterfaceServer).ReviseHAProxyConfiguration(ctx, req.(*HAProxyConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// CpiInterface_ServiceDesc is the grpc.ServiceDesc for CpiInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CpiInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data_plane.CpiInterface",
	HandlerType: (*CpiInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetInvocationsMetrics",
			Handler:    _CpiInterface_SetInvocationsMetrics_Handler,
		},
		{
			MethodName: "SetBackgroundMetrics",
			Handler:    _CpiInterface_SetBackgroundMetrics_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _CpiInterface_ListServices_Handler,
		},
		{
			MethodName: "HasService",
			Handler:    _CpiInterface_HasService_Handler,
		},
		{
			MethodName: "RegisterDataplane",
			Handler:    _CpiInterface_RegisterDataplane_Handler,
		},
		{
			MethodName: "RegisterService",
			Handler:    _CpiInterface_RegisterService_Handler,
		},
		{
			MethodName: "RegisterWorkflow",
			Handler:    _CpiInterface_RegisterWorkflow_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _CpiInterface_RegisterNode_Handler,
		},
		{
			MethodName: "NodeHeartbeat",
			Handler:    _CpiInterface_NodeHeartbeat_Handler,
		},
		{
			MethodName: "ReportFailure",
			Handler:    _CpiInterface_ReportFailure_Handler,
		},
		{
			MethodName: "DeregisterDataplane",
			Handler:    _CpiInterface_DeregisterDataplane_Handler,
		},
		{
			MethodName: "DeregisterNode",
			Handler:    _CpiInterface_DeregisterNode_Handler,
		},
		{
			MethodName: "DeregisterService",
			Handler:    _CpiInterface_DeregisterService_Handler,
		},
		{
			MethodName: "DeregisterWorkflow",
			Handler:    _CpiInterface_DeregisterWorkflow_Handler,
		},
		{
			MethodName: "ResetMeasurements",
			Handler:    _CpiInterface_ResetMeasurements_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _CpiInterface_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _CpiInterface_AppendEntries_Handler,
		},
		{
			MethodName: "ReviseHAProxyConfiguration",
			Handler:    _CpiInterface_ReviseHAProxyConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control_plane_interface.proto",
}
