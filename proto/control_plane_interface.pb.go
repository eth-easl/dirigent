// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.17.3
// source: control_plane_interface.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FailureType int32

const (
	FailureType_SANDBOX_FAILURE        FailureType = 0
	FailureType_SANDBOX_DAEMON_FAILURE FailureType = 1
	FailureType_WORKER_NODE_FAILURE    FailureType = 2
)

// Enum value maps for FailureType.
var (
	FailureType_name = map[int32]string{
		0: "SANDBOX_FAILURE",
		1: "SANDBOX_DAEMON_FAILURE",
		2: "WORKER_NODE_FAILURE",
	}
	FailureType_value = map[string]int32{
		"SANDBOX_FAILURE":        0,
		"SANDBOX_DAEMON_FAILURE": 1,
		"WORKER_NODE_FAILURE":    2,
	}
)

func (x FailureType) Enum() *FailureType {
	p := new(FailureType)
	*p = x
	return p
}

func (x FailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_control_plane_interface_proto_enumTypes[0].Descriptor()
}

func (FailureType) Type() protoreflect.EnumType {
	return &file_control_plane_interface_proto_enumTypes[0]
}

func (x FailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureType.Descriptor instead.
func (FailureType) EnumDescriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{0}
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID string       `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	IP     string       `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	Port   int32        `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	Cpu    uint64       `protobuf:"varint,4,opt,name=Cpu,proto3" json:"Cpu,omitempty"`
	Memory uint64       `protobuf:"varint,5,opt,name=Memory,proto3" json:"Memory,omitempty"`
	Images []*ImageInfo `protobuf:"bytes,6,rep,name=Images,proto3" json:"Images,omitempty"`
	CIDR   string       `protobuf:"bytes,7,opt,name=CIDR,proto3" json:"CIDR,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{0}
}

func (x *NodeInfo) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeInfo) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *NodeInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NodeInfo) GetCpu() uint64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *NodeInfo) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *NodeInfo) GetImages() []*ImageInfo {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *NodeInfo) GetCIDR() string {
	if x != nil {
		return x.CIDR
	}
	return ""
}

type NodeHeartbeatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID     string `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	CpuUsed    uint64 `protobuf:"varint,2,opt,name=CpuUsed,proto3" json:"CpuUsed,omitempty"`
	MemoryUsed uint64 `protobuf:"varint,3,opt,name=MemoryUsed,proto3" json:"MemoryUsed,omitempty"`
}

func (x *NodeHeartbeatMessage) Reset() {
	*x = NodeHeartbeatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHeartbeatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHeartbeatMessage) ProtoMessage() {}

func (x *NodeHeartbeatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHeartbeatMessage.ProtoReflect.Descriptor instead.
func (*NodeHeartbeatMessage) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{1}
}

func (x *NodeHeartbeatMessage) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeHeartbeatMessage) GetCpuUsed() uint64 {
	if x != nil {
		return x.CpuUsed
	}
	return 0
}

func (x *NodeHeartbeatMessage) GetMemoryUsed() uint64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

type AutoscalingMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName      string  `protobuf:"bytes,1,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	DataplaneName    string  `protobuf:"bytes,2,opt,name=DataplaneName,proto3" json:"DataplaneName,omitempty"`
	InflightRequests int32   `protobuf:"varint,3,opt,name=InflightRequests,proto3" json:"InflightRequests,omitempty"`
	RpsValue         float32 `protobuf:"fixed32,4,opt,name=RpsValue,proto3" json:"RpsValue,omitempty"`
}

func (x *AutoscalingMetric) Reset() {
	*x = AutoscalingMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoscalingMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoscalingMetric) ProtoMessage() {}

func (x *AutoscalingMetric) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoscalingMetric.ProtoReflect.Descriptor instead.
func (*AutoscalingMetric) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{2}
}

func (x *AutoscalingMetric) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AutoscalingMetric) GetDataplaneName() string {
	if x != nil {
		return x.DataplaneName
	}
	return ""
}

func (x *AutoscalingMetric) GetInflightRequests() int32 {
	if x != nil {
		return x.InflightRequests
	}
	return 0
}

func (x *AutoscalingMetric) GetRpsValue() float32 {
	if x != nil {
		return x.RpsValue
	}
	return 0
}

type DataplaneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP        string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	APIPort   int32  `protobuf:"varint,2,opt,name=APIPort,proto3" json:"APIPort,omitempty"`
	ProxyPort int32  `protobuf:"varint,3,opt,name=ProxyPort,proto3" json:"ProxyPort,omitempty"`
}

func (x *DataplaneInfo) Reset() {
	*x = DataplaneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataplaneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataplaneInfo) ProtoMessage() {}

func (x *DataplaneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataplaneInfo.ProtoReflect.Descriptor instead.
func (*DataplaneInfo) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{3}
}

func (x *DataplaneInfo) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *DataplaneInfo) GetAPIPort() int32 {
	if x != nil {
		return x.APIPort
	}
	return 0
}

func (x *DataplaneInfo) GetProxyPort() int32 {
	if x != nil {
		return x.ProxyPort
	}
	return 0
}

type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        FailureType `protobuf:"varint,1,opt,name=Type,proto3,enum=data_plane.FailureType" json:"Type,omitempty"`
	ServiceName string      `protobuf:"bytes,2,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	SandboxIDs  []string    `protobuf:"bytes,3,rep,name=SandboxIDs,proto3" json:"SandboxIDs,omitempty"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{4}
}

func (x *Failure) GetType() FailureType {
	if x != nil {
		return x.Type
	}
	return FailureType_SANDBOX_FAILURE
}

func (x *Failure) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Failure) GetSandboxIDs() []string {
	if x != nil {
		return x.SandboxIDs
	}
	return nil
}

type HAProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataplanes          []string `protobuf:"bytes,1,rep,name=Dataplanes,proto3" json:"Dataplanes,omitempty"`
	RegistrationServers []string `protobuf:"bytes,2,rep,name=RegistrationServers,proto3" json:"RegistrationServers,omitempty"`
}

func (x *HAProxyConfig) Reset() {
	*x = HAProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HAProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HAProxyConfig) ProtoMessage() {}

func (x *HAProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HAProxyConfig.ProtoReflect.Descriptor instead.
func (*HAProxyConfig) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{5}
}

func (x *HAProxyConfig) GetDataplanes() []string {
	if x != nil {
		return x.Dataplanes
	}
	return nil
}

func (x *HAProxyConfig) GetRegistrationServers() []string {
	if x != nil {
		return x.RegistrationServers
	}
	return nil
}

type MetricsPredictiveAutoscaler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric []*FunctionMetrics `protobuf:"bytes,1,rep,name=metric,proto3" json:"metric,omitempty"`
}

func (x *MetricsPredictiveAutoscaler) Reset() {
	*x = MetricsPredictiveAutoscaler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsPredictiveAutoscaler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsPredictiveAutoscaler) ProtoMessage() {}

func (x *MetricsPredictiveAutoscaler) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsPredictiveAutoscaler.ProtoReflect.Descriptor instead.
func (*MetricsPredictiveAutoscaler) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{6}
}

func (x *MetricsPredictiveAutoscaler) GetMetric() []*FunctionMetrics {
	if x != nil {
		return x.Metric
	}
	return nil
}

type FunctionMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionName         string    `protobuf:"bytes,1,opt,name=functionName,proto3" json:"functionName,omitempty"`
	FunctionDuration     uint32    `protobuf:"varint,2,opt,name=functionDuration,proto3" json:"functionDuration,omitempty"`
	InvocationsPerMinute []float64 `protobuf:"fixed64,3,rep,packed,name=invocationsPerMinute,proto3" json:"invocationsPerMinute,omitempty"`
}

func (x *FunctionMetrics) Reset() {
	*x = FunctionMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionMetrics) ProtoMessage() {}

func (x *FunctionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionMetrics.ProtoReflect.Descriptor instead.
func (*FunctionMetrics) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{7}
}

func (x *FunctionMetrics) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *FunctionMetrics) GetFunctionDuration() uint32 {
	if x != nil {
		return x.FunctionDuration
	}
	return 0
}

func (x *FunctionMetrics) GetInvocationsPerMinute() []float64 {
	if x != nil {
		return x.InvocationsPerMinute
	}
	return nil
}

type ServiceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ServiceIdentifier) Reset() {
	*x = ServiceIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceIdentifier) ProtoMessage() {}

func (x *ServiceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceIdentifier.ProtoReflect.Descriptor instead.
func (*ServiceIdentifier) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HasServiceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasService bool `protobuf:"varint,2,opt,name=HasService,proto3" json:"HasService,omitempty"`
}

func (x *HasServiceResult) Reset() {
	*x = HasServiceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasServiceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasServiceResult) ProtoMessage() {}

func (x *HasServiceResult) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasServiceResult.ProtoReflect.Descriptor instead.
func (*HasServiceResult) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{9}
}

func (x *HasServiceResult) GetHasService() bool {
	if x != nil {
		return x.HasService
	}
	return false
}

type NodeRegistrationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	CIDR    string `protobuf:"bytes,2,opt,name=CIDR,proto3" json:"CIDR,omitempty"`
}

func (x *NodeRegistrationStatus) Reset() {
	*x = NodeRegistrationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_plane_interface_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegistrationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegistrationStatus) ProtoMessage() {}

func (x *NodeRegistrationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_interface_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegistrationStatus.ProtoReflect.Descriptor instead.
func (*NodeRegistrationStatus) Descriptor() ([]byte, []int) {
	return file_control_plane_interface_proto_rawDescGZIP(), []int{10}
}

func (x *NodeRegistrationStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *NodeRegistrationStatus) GetCIDR() string {
	if x != nil {
		return x.CIDR
	}
	return ""
}

var File_control_plane_interface_proto protoreflect.FileDescriptor

var file_control_plane_interface_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x72, 0x61, 0x66, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43,
	0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x43, 0x70, 0x75, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x49, 0x44, 0x52, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x43, 0x49, 0x44, 0x52, 0x22, 0x68, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x70, 0x75, 0x55,
	0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x43, 0x70, 0x75, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x65, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x49, 0x6e, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x70, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x52, 0x70, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x50, 0x49,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x50, 0x49, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x22, 0x78, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x73, 0x22, 0x61, 0x0a, 0x0d, 0x48,
	0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x52,
	0x0a, 0x1b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x48, 0x61, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x49, 0x44, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x49, 0x44, 0x52, 0x2a,
	0x57, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x44,
	0x41, 0x45, 0x4d, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x32, 0xb4, 0x0a, 0x0a, 0x0c, 0x43, 0x70, 0x69,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x48, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4a, 0x0a, 0x13, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a,
	0x0e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x44, 0x65, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x54, 0x0a, 0x12, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x18, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x11, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x38, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x13, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x1a,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x48, 0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x48, 0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74,
	0x68, 0x2d, 0x65, 0x61, 0x73, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_control_plane_interface_proto_rawDescOnce sync.Once
	file_control_plane_interface_proto_rawDescData = file_control_plane_interface_proto_rawDesc
)

func file_control_plane_interface_proto_rawDescGZIP() []byte {
	file_control_plane_interface_proto_rawDescOnce.Do(func() {
		file_control_plane_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_control_plane_interface_proto_rawDescData)
	})
	return file_control_plane_interface_proto_rawDescData
}

var file_control_plane_interface_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_control_plane_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_control_plane_interface_proto_goTypes = []interface{}{
	(FailureType)(0),                    // 0: data_plane.FailureType
	(*NodeInfo)(nil),                    // 1: data_plane.NodeInfo
	(*NodeHeartbeatMessage)(nil),        // 2: data_plane.NodeHeartbeatMessage
	(*AutoscalingMetric)(nil),           // 3: data_plane.AutoscalingMetric
	(*DataplaneInfo)(nil),               // 4: data_plane.DataplaneInfo
	(*Failure)(nil),                     // 5: data_plane.Failure
	(*HAProxyConfig)(nil),               // 6: data_plane.HAProxyConfig
	(*MetricsPredictiveAutoscaler)(nil), // 7: data_plane.MetricsPredictiveAutoscaler
	(*FunctionMetrics)(nil),             // 8: data_plane.FunctionMetrics
	(*ServiceIdentifier)(nil),           // 9: data_plane.ServiceIdentifier
	(*HasServiceResult)(nil),            // 10: data_plane.HasServiceResult
	(*NodeRegistrationStatus)(nil),      // 11: data_plane.NodeRegistrationStatus
	(*ImageInfo)(nil),                   // 12: data_plane.ImageInfo
	(*emptypb.Empty)(nil),               // 13: google.protobuf.Empty
	(*ServiceInfo)(nil),                 // 14: data_plane.ServiceInfo
	(*WorkflowInfo)(nil),                // 15: data_plane.WorkflowInfo
	(*WorkflowObjectIdentifier)(nil),    // 16: data_plane.WorkflowObjectIdentifier
	(*RequestVoteArgs)(nil),             // 17: RequestVoteArgs
	(*AppendEntriesArgs)(nil),           // 18: AppendEntriesArgs
	(*ActionStatus)(nil),                // 19: data_plane.ActionStatus
	(*ServiceList)(nil),                 // 20: data_plane.ServiceList
	(*RequestVoteReply)(nil),            // 21: RequestVoteReply
	(*AppendEntriesReply)(nil),          // 22: AppendEntriesReply
}
var file_control_plane_interface_proto_depIdxs = []int32{
	12, // 0: data_plane.NodeInfo.Images:type_name -> data_plane.ImageInfo
	0,  // 1: data_plane.Failure.Type:type_name -> data_plane.FailureType
	8,  // 2: data_plane.MetricsPredictiveAutoscaler.metric:type_name -> data_plane.FunctionMetrics
	3,  // 3: data_plane.CpiInterface.SetInvocationsMetrics:input_type -> data_plane.AutoscalingMetric
	7,  // 4: data_plane.CpiInterface.SetBackgroundMetrics:input_type -> data_plane.MetricsPredictiveAutoscaler
	13, // 5: data_plane.CpiInterface.ListServices:input_type -> google.protobuf.Empty
	9,  // 6: data_plane.CpiInterface.HasService:input_type -> data_plane.ServiceIdentifier
	4,  // 7: data_plane.CpiInterface.RegisterDataplane:input_type -> data_plane.DataplaneInfo
	14, // 8: data_plane.CpiInterface.RegisterService:input_type -> data_plane.ServiceInfo
	15, // 9: data_plane.CpiInterface.RegisterWorkflow:input_type -> data_plane.WorkflowInfo
	1,  // 10: data_plane.CpiInterface.RegisterNode:input_type -> data_plane.NodeInfo
	2,  // 11: data_plane.CpiInterface.NodeHeartbeat:input_type -> data_plane.NodeHeartbeatMessage
	5,  // 12: data_plane.CpiInterface.ReportFailure:input_type -> data_plane.Failure
	4,  // 13: data_plane.CpiInterface.DeregisterDataplane:input_type -> data_plane.DataplaneInfo
	1,  // 14: data_plane.CpiInterface.DeregisterNode:input_type -> data_plane.NodeInfo
	14, // 15: data_plane.CpiInterface.DeregisterService:input_type -> data_plane.ServiceInfo
	16, // 16: data_plane.CpiInterface.DeregisterWorkflow:input_type -> data_plane.WorkflowObjectIdentifier
	13, // 17: data_plane.CpiInterface.ResetMeasurements:input_type -> google.protobuf.Empty
	17, // 18: data_plane.CpiInterface.RequestVote:input_type -> RequestVoteArgs
	18, // 19: data_plane.CpiInterface.AppendEntries:input_type -> AppendEntriesArgs
	6,  // 20: data_plane.CpiInterface.ReviseHAProxyConfiguration:input_type -> data_plane.HAProxyConfig
	19, // 21: data_plane.CpiInterface.SetInvocationsMetrics:output_type -> data_plane.ActionStatus
	19, // 22: data_plane.CpiInterface.SetBackgroundMetrics:output_type -> data_plane.ActionStatus
	20, // 23: data_plane.CpiInterface.ListServices:output_type -> data_plane.ServiceList
	10, // 24: data_plane.CpiInterface.HasService:output_type -> data_plane.HasServiceResult
	19, // 25: data_plane.CpiInterface.RegisterDataplane:output_type -> data_plane.ActionStatus
	19, // 26: data_plane.CpiInterface.RegisterService:output_type -> data_plane.ActionStatus
	19, // 27: data_plane.CpiInterface.RegisterWorkflow:output_type -> data_plane.ActionStatus
	11, // 28: data_plane.CpiInterface.RegisterNode:output_type -> data_plane.NodeRegistrationStatus
	19, // 29: data_plane.CpiInterface.NodeHeartbeat:output_type -> data_plane.ActionStatus
	19, // 30: data_plane.CpiInterface.ReportFailure:output_type -> data_plane.ActionStatus
	19, // 31: data_plane.CpiInterface.DeregisterDataplane:output_type -> data_plane.ActionStatus
	11, // 32: data_plane.CpiInterface.DeregisterNode:output_type -> data_plane.NodeRegistrationStatus
	19, // 33: data_plane.CpiInterface.DeregisterService:output_type -> data_plane.ActionStatus
	19, // 34: data_plane.CpiInterface.DeregisterWorkflow:output_type -> data_plane.ActionStatus
	19, // 35: data_plane.CpiInterface.ResetMeasurements:output_type -> data_plane.ActionStatus
	21, // 36: data_plane.CpiInterface.RequestVote:output_type -> RequestVoteReply
	22, // 37: data_plane.CpiInterface.AppendEntries:output_type -> AppendEntriesReply
	19, // 38: data_plane.CpiInterface.ReviseHAProxyConfiguration:output_type -> data_plane.ActionStatus
	21, // [21:39] is the sub-list for method output_type
	3,  // [3:21] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_control_plane_interface_proto_init() }
func file_control_plane_interface_proto_init() {
	if File_control_plane_interface_proto != nil {
		return
	}
	file_common_proto_init()
	file_raft_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_control_plane_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_plane_interface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHeartbeatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_plane_interface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoscalingMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_plane_interface_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataplaneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_plane_interface_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_plane_interface_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HAProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_plane_interface_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsPredictiveAutoscaler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_plane_interface_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_plane_interface_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_plane_interface_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasServiceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_plane_interface_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegistrationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_control_plane_interface_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_control_plane_interface_proto_goTypes,
		DependencyIndexes: file_control_plane_interface_proto_depIdxs,
		EnumInfos:         file_control_plane_interface_proto_enumTypes,
		MessageInfos:      file_control_plane_interface_proto_msgTypes,
	}.Build()
	File_control_plane_interface_proto = out.File
	file_control_plane_interface_proto_rawDesc = nil
	file_control_plane_interface_proto_goTypes = nil
	file_control_plane_interface_proto_depIdxs = nil
}
