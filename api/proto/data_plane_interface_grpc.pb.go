// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DpiInterfaceClient is the client API for DpiInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpiInterfaceClient interface {
	AddDeployment(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*DeploymentUpdateSuccess, error)
	UpdateEndpointList(ctx context.Context, in *DeploymentEndpointPatch, opts ...grpc.CallOption) (*DeploymentUpdateSuccess, error)
	DeleteDeployment(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*DeploymentUpdateSuccess, error)
}

type dpiInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpiInterfaceClient(cc grpc.ClientConnInterface) DpiInterfaceClient {
	return &dpiInterfaceClient{cc}
}

func (c *dpiInterfaceClient) AddDeployment(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*DeploymentUpdateSuccess, error) {
	out := new(DeploymentUpdateSuccess)
	err := c.cc.Invoke(ctx, "/data_plane.DpiInterface/AddDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiInterfaceClient) UpdateEndpointList(ctx context.Context, in *DeploymentEndpointPatch, opts ...grpc.CallOption) (*DeploymentUpdateSuccess, error) {
	out := new(DeploymentUpdateSuccess)
	err := c.cc.Invoke(ctx, "/data_plane.DpiInterface/UpdateEndpointList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiInterfaceClient) DeleteDeployment(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*DeploymentUpdateSuccess, error) {
	out := new(DeploymentUpdateSuccess)
	err := c.cc.Invoke(ctx, "/data_plane.DpiInterface/DeleteDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpiInterfaceServer is the server API for DpiInterface service.
// All implementations must embed UnimplementedDpiInterfaceServer
// for forward compatibility
type DpiInterfaceServer interface {
	AddDeployment(context.Context, *ServiceInfo) (*DeploymentUpdateSuccess, error)
	UpdateEndpointList(context.Context, *DeploymentEndpointPatch) (*DeploymentUpdateSuccess, error)
	DeleteDeployment(context.Context, *ServiceInfo) (*DeploymentUpdateSuccess, error)
	mustEmbedUnimplementedDpiInterfaceServer()
}

// UnimplementedDpiInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedDpiInterfaceServer struct {
}

func (UnimplementedDpiInterfaceServer) AddDeployment(context.Context, *ServiceInfo) (*DeploymentUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeployment not implemented")
}
func (UnimplementedDpiInterfaceServer) UpdateEndpointList(context.Context, *DeploymentEndpointPatch) (*DeploymentUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpointList not implemented")
}
func (UnimplementedDpiInterfaceServer) DeleteDeployment(context.Context, *ServiceInfo) (*DeploymentUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedDpiInterfaceServer) mustEmbedUnimplementedDpiInterfaceServer() {}

// UnsafeDpiInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpiInterfaceServer will
// result in compilation errors.
type UnsafeDpiInterfaceServer interface {
	mustEmbedUnimplementedDpiInterfaceServer()
}

func RegisterDpiInterfaceServer(s grpc.ServiceRegistrar, srv DpiInterfaceServer) {
	s.RegisterService(&DpiInterface_ServiceDesc, srv)
}

func _DpiInterface_AddDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiInterfaceServer).AddDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.DpiInterface/AddDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiInterfaceServer).AddDeployment(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiInterface_UpdateEndpointList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentEndpointPatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiInterfaceServer).UpdateEndpointList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.DpiInterface/UpdateEndpointList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiInterfaceServer).UpdateEndpointList(ctx, req.(*DeploymentEndpointPatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiInterface_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiInterfaceServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_plane.DpiInterface/DeleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiInterfaceServer).DeleteDeployment(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// DpiInterface_ServiceDesc is the grpc.ServiceDesc for DpiInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpiInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data_plane.DpiInterface",
	HandlerType: (*DpiInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDeployment",
			Handler:    _DpiInterface_AddDeployment_Handler,
		},
		{
			MethodName: "UpdateEndpointList",
			Handler:    _DpiInterface_UpdateEndpointList_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _DpiInterface_DeleteDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_plane_interface.proto",
}
