// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: worker_node_interface.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkerNodeInterface_CreateSandbox_FullMethodName = "/data_plane.WorkerNodeInterface/CreateSandbox"
	WorkerNodeInterface_DeleteSandbox_FullMethodName = "/data_plane.WorkerNodeInterface/DeleteSandbox"
	WorkerNodeInterface_ListEndpoints_FullMethodName = "/data_plane.WorkerNodeInterface/ListEndpoints"
)

// WorkerNodeInterfaceClient is the client API for WorkerNodeInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerNodeInterfaceClient interface {
	CreateSandbox(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*SandboxCreationStatus, error)
	DeleteSandbox(ctx context.Context, in *SandboxID, opts ...grpc.CallOption) (*ActionStatus, error)
	ListEndpoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EndpointsList, error)
}

type workerNodeInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerNodeInterfaceClient(cc grpc.ClientConnInterface) WorkerNodeInterfaceClient {
	return &workerNodeInterfaceClient{cc}
}

func (c *workerNodeInterfaceClient) CreateSandbox(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*SandboxCreationStatus, error) {
	out := new(SandboxCreationStatus)
	err := c.cc.Invoke(ctx, WorkerNodeInterface_CreateSandbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerNodeInterfaceClient) DeleteSandbox(ctx context.Context, in *SandboxID, opts ...grpc.CallOption) (*ActionStatus, error) {
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, WorkerNodeInterface_DeleteSandbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerNodeInterfaceClient) ListEndpoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EndpointsList, error) {
	out := new(EndpointsList)
	err := c.cc.Invoke(ctx, WorkerNodeInterface_ListEndpoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerNodeInterfaceServer is the server API for WorkerNodeInterface service.
// All implementations must embed UnimplementedWorkerNodeInterfaceServer
// for forward compatibility
type WorkerNodeInterfaceServer interface {
	CreateSandbox(context.Context, *ServiceInfo) (*SandboxCreationStatus, error)
	DeleteSandbox(context.Context, *SandboxID) (*ActionStatus, error)
	ListEndpoints(context.Context, *emptypb.Empty) (*EndpointsList, error)
	mustEmbedUnimplementedWorkerNodeInterfaceServer()
}

// UnimplementedWorkerNodeInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerNodeInterfaceServer struct {
}

func (UnimplementedWorkerNodeInterfaceServer) CreateSandbox(context.Context, *ServiceInfo) (*SandboxCreationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSandbox not implemented")
}
func (UnimplementedWorkerNodeInterfaceServer) DeleteSandbox(context.Context, *SandboxID) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSandbox not implemented")
}
func (UnimplementedWorkerNodeInterfaceServer) ListEndpoints(context.Context, *emptypb.Empty) (*EndpointsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndpoints not implemented")
}
func (UnimplementedWorkerNodeInterfaceServer) mustEmbedUnimplementedWorkerNodeInterfaceServer() {}

// UnsafeWorkerNodeInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerNodeInterfaceServer will
// result in compilation errors.
type UnsafeWorkerNodeInterfaceServer interface {
	mustEmbedUnimplementedWorkerNodeInterfaceServer()
}

func RegisterWorkerNodeInterfaceServer(s grpc.ServiceRegistrar, srv WorkerNodeInterfaceServer) {
	s.RegisterService(&WorkerNodeInterface_ServiceDesc, srv)
}

func _WorkerNodeInterface_CreateSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeInterfaceServer).CreateSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerNodeInterface_CreateSandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeInterfaceServer).CreateSandbox(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerNodeInterface_DeleteSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeInterfaceServer).DeleteSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerNodeInterface_DeleteSandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeInterfaceServer).DeleteSandbox(ctx, req.(*SandboxID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerNodeInterface_ListEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeInterfaceServer).ListEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerNodeInterface_ListEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeInterfaceServer).ListEndpoints(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerNodeInterface_ServiceDesc is the grpc.ServiceDesc for WorkerNodeInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerNodeInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data_plane.WorkerNodeInterface",
	HandlerType: (*WorkerNodeInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSandbox",
			Handler:    _WorkerNodeInterface_CreateSandbox_Handler,
		},
		{
			MethodName: "DeleteSandbox",
			Handler:    _WorkerNodeInterface_DeleteSandbox_Handler,
		},
		{
			MethodName: "ListEndpoints",
			Handler:    _WorkerNodeInterface_ListEndpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker_node_interface.proto",
}
