// Code generated by MockGen. DO NOT EDIT.
// Source: proto/control_plane_interface_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source proto/control_plane_interface_grpc.pb.go -package mock_cp_api
//

// Package mock_cp_api is a generated GoMock package.
package mock_cp_api

import (
	proto "cluster_manager/proto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockCpiInterfaceClient is a mock of CpiInterfaceClient interface.
type MockCpiInterfaceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCpiInterfaceClientMockRecorder
}

// MockCpiInterfaceClientMockRecorder is the mock recorder for MockCpiInterfaceClient.
type MockCpiInterfaceClientMockRecorder struct {
	mock *MockCpiInterfaceClient
}

// NewMockCpiInterfaceClient creates a new mock instance.
func NewMockCpiInterfaceClient(ctrl *gomock.Controller) *MockCpiInterfaceClient {
	mock := &MockCpiInterfaceClient{ctrl: ctrl}
	mock.recorder = &MockCpiInterfaceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCpiInterfaceClient) EXPECT() *MockCpiInterfaceClientMockRecorder {
	return m.recorder
}

// AppendEntries mocks base method.
func (m *MockCpiInterfaceClient) AppendEntries(ctx context.Context, in *proto.AppendEntriesArgs, opts ...grpc.CallOption) (*proto.AppendEntriesReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AppendEntries", varargs...)
	ret0, _ := ret[0].(*proto.AppendEntriesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntries indicates an expected call of AppendEntries.
func (mr *MockCpiInterfaceClientMockRecorder) AppendEntries(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntries", reflect.TypeOf((*MockCpiInterfaceClient)(nil).AppendEntries), varargs...)
}

// DeregisterDataplane mocks base method.
func (m *MockCpiInterfaceClient) DeregisterDataplane(ctx context.Context, in *proto.DataplaneInfo, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterDataplane", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterDataplane indicates an expected call of DeregisterDataplane.
func (mr *MockCpiInterfaceClientMockRecorder) DeregisterDataplane(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterDataplane", reflect.TypeOf((*MockCpiInterfaceClient)(nil).DeregisterDataplane), varargs...)
}

// DeregisterNode mocks base method.
func (m *MockCpiInterfaceClient) DeregisterNode(ctx context.Context, in *proto.NodeInfo, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterNode", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterNode indicates an expected call of DeregisterNode.
func (mr *MockCpiInterfaceClientMockRecorder) DeregisterNode(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterNode", reflect.TypeOf((*MockCpiInterfaceClient)(nil).DeregisterNode), varargs...)
}

// DeregisterService mocks base method.
func (m *MockCpiInterfaceClient) DeregisterService(ctx context.Context, in *proto.ServiceInfo, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterService", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterService indicates an expected call of DeregisterService.
func (mr *MockCpiInterfaceClientMockRecorder) DeregisterService(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterService", reflect.TypeOf((*MockCpiInterfaceClient)(nil).DeregisterService), varargs...)
}

// ListServices mocks base method.
func (m *MockCpiInterfaceClient) ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.ServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServices", varargs...)
	ret0, _ := ret[0].(*proto.ServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockCpiInterfaceClientMockRecorder) ListServices(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockCpiInterfaceClient)(nil).ListServices), varargs...)
}

// NodeHeartbeat mocks base method.
func (m *MockCpiInterfaceClient) NodeHeartbeat(ctx context.Context, in *proto.NodeHeartbeatMessage, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeHeartbeat", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeHeartbeat indicates an expected call of NodeHeartbeat.
func (mr *MockCpiInterfaceClientMockRecorder) NodeHeartbeat(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeHeartbeat", reflect.TypeOf((*MockCpiInterfaceClient)(nil).NodeHeartbeat), varargs...)
}

// OnMetricsReceive mocks base method.
func (m *MockCpiInterfaceClient) OnMetricsReceive(ctx context.Context, in *proto.AutoscalingMetric, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OnMetricsReceive", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnMetricsReceive indicates an expected call of OnMetricsReceive.
func (mr *MockCpiInterfaceClientMockRecorder) OnMetricsReceive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMetricsReceive", reflect.TypeOf((*MockCpiInterfaceClient)(nil).OnMetricsReceive), varargs...)
}

// RegisterDataplane mocks base method.
func (m *MockCpiInterfaceClient) RegisterDataplane(ctx context.Context, in *proto.DataplaneInfo, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterDataplane", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDataplane indicates an expected call of RegisterDataplane.
func (mr *MockCpiInterfaceClientMockRecorder) RegisterDataplane(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDataplane", reflect.TypeOf((*MockCpiInterfaceClient)(nil).RegisterDataplane), varargs...)
}

// RegisterNode mocks base method.
func (m *MockCpiInterfaceClient) RegisterNode(ctx context.Context, in *proto.NodeInfo, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterNode", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNode indicates an expected call of RegisterNode.
func (mr *MockCpiInterfaceClientMockRecorder) RegisterNode(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNode", reflect.TypeOf((*MockCpiInterfaceClient)(nil).RegisterNode), varargs...)
}

// RegisterService mocks base method.
func (m *MockCpiInterfaceClient) RegisterService(ctx context.Context, in *proto.ServiceInfo, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterService", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockCpiInterfaceClientMockRecorder) RegisterService(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockCpiInterfaceClient)(nil).RegisterService), varargs...)
}

// ReportFailure mocks base method.
func (m *MockCpiInterfaceClient) ReportFailure(ctx context.Context, in *proto.Failure, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportFailure", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportFailure indicates an expected call of ReportFailure.
func (mr *MockCpiInterfaceClientMockRecorder) ReportFailure(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportFailure", reflect.TypeOf((*MockCpiInterfaceClient)(nil).ReportFailure), varargs...)
}

// RequestVote mocks base method.
func (m *MockCpiInterfaceClient) RequestVote(ctx context.Context, in *proto.RequestVoteArgs, opts ...grpc.CallOption) (*proto.RequestVoteReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestVote", varargs...)
	ret0, _ := ret[0].(*proto.RequestVoteReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVote indicates an expected call of RequestVote.
func (mr *MockCpiInterfaceClientMockRecorder) RequestVote(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVote", reflect.TypeOf((*MockCpiInterfaceClient)(nil).RequestVote), varargs...)
}

// ResetMeasurements mocks base method.
func (m *MockCpiInterfaceClient) ResetMeasurements(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetMeasurements", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetMeasurements indicates an expected call of ResetMeasurements.
func (mr *MockCpiInterfaceClientMockRecorder) ResetMeasurements(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMeasurements", reflect.TypeOf((*MockCpiInterfaceClient)(nil).ResetMeasurements), varargs...)
}

// ReviseHAProxyConfiguration mocks base method.
func (m *MockCpiInterfaceClient) ReviseHAProxyConfiguration(ctx context.Context, in *proto.HAProxyConfig, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReviseHAProxyConfiguration", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReviseHAProxyConfiguration indicates an expected call of ReviseHAProxyConfiguration.
func (mr *MockCpiInterfaceClientMockRecorder) ReviseHAProxyConfiguration(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviseHAProxyConfiguration", reflect.TypeOf((*MockCpiInterfaceClient)(nil).ReviseHAProxyConfiguration), varargs...)
}

// SendMetricsToPredictiveAutoscaler mocks base method.
func (m *MockCpiInterfaceClient) SendMetricsToPredictiveAutoscaler(ctx context.Context, in *proto.MetricsPredictiveAutoscaler, opts ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMetricsToPredictiveAutoscaler", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetricsToPredictiveAutoscaler indicates an expected call of SendMetricsToPredictiveAutoscaler.
func (mr *MockCpiInterfaceClientMockRecorder) SendMetricsToPredictiveAutoscaler(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricsToPredictiveAutoscaler", reflect.TypeOf((*MockCpiInterfaceClient)(nil).SendMetricsToPredictiveAutoscaler), varargs...)
}

// MockCpiInterfaceServer is a mock of CpiInterfaceServer interface.
type MockCpiInterfaceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCpiInterfaceServerMockRecorder
}

// MockCpiInterfaceServerMockRecorder is the mock recorder for MockCpiInterfaceServer.
type MockCpiInterfaceServerMockRecorder struct {
	mock *MockCpiInterfaceServer
}

// NewMockCpiInterfaceServer creates a new mock instance.
func NewMockCpiInterfaceServer(ctrl *gomock.Controller) *MockCpiInterfaceServer {
	mock := &MockCpiInterfaceServer{ctrl: ctrl}
	mock.recorder = &MockCpiInterfaceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCpiInterfaceServer) EXPECT() *MockCpiInterfaceServerMockRecorder {
	return m.recorder
}

// AppendEntries mocks base method.
func (m *MockCpiInterfaceServer) AppendEntries(arg0 context.Context, arg1 *proto.AppendEntriesArgs) (*proto.AppendEntriesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEntries", arg0, arg1)
	ret0, _ := ret[0].(*proto.AppendEntriesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntries indicates an expected call of AppendEntries.
func (mr *MockCpiInterfaceServerMockRecorder) AppendEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntries", reflect.TypeOf((*MockCpiInterfaceServer)(nil).AppendEntries), arg0, arg1)
}

// DeregisterDataplane mocks base method.
func (m *MockCpiInterfaceServer) DeregisterDataplane(arg0 context.Context, arg1 *proto.DataplaneInfo) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterDataplane", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterDataplane indicates an expected call of DeregisterDataplane.
func (mr *MockCpiInterfaceServerMockRecorder) DeregisterDataplane(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterDataplane", reflect.TypeOf((*MockCpiInterfaceServer)(nil).DeregisterDataplane), arg0, arg1)
}

// DeregisterNode mocks base method.
func (m *MockCpiInterfaceServer) DeregisterNode(arg0 context.Context, arg1 *proto.NodeInfo) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterNode", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterNode indicates an expected call of DeregisterNode.
func (mr *MockCpiInterfaceServerMockRecorder) DeregisterNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterNode", reflect.TypeOf((*MockCpiInterfaceServer)(nil).DeregisterNode), arg0, arg1)
}

// DeregisterService mocks base method.
func (m *MockCpiInterfaceServer) DeregisterService(arg0 context.Context, arg1 *proto.ServiceInfo) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterService", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterService indicates an expected call of DeregisterService.
func (mr *MockCpiInterfaceServerMockRecorder) DeregisterService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterService", reflect.TypeOf((*MockCpiInterfaceServer)(nil).DeregisterService), arg0, arg1)
}

// ListServices mocks base method.
func (m *MockCpiInterfaceServer) ListServices(arg0 context.Context, arg1 *emptypb.Empty) (*proto.ServiceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0, arg1)
	ret0, _ := ret[0].(*proto.ServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockCpiInterfaceServerMockRecorder) ListServices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockCpiInterfaceServer)(nil).ListServices), arg0, arg1)
}

// NodeHeartbeat mocks base method.
func (m *MockCpiInterfaceServer) NodeHeartbeat(arg0 context.Context, arg1 *proto.NodeHeartbeatMessage) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeHeartbeat", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeHeartbeat indicates an expected call of NodeHeartbeat.
func (mr *MockCpiInterfaceServerMockRecorder) NodeHeartbeat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeHeartbeat", reflect.TypeOf((*MockCpiInterfaceServer)(nil).NodeHeartbeat), arg0, arg1)
}

// OnMetricsReceive mocks base method.
func (m *MockCpiInterfaceServer) OnMetricsReceive(arg0 context.Context, arg1 *proto.AutoscalingMetric) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnMetricsReceive", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnMetricsReceive indicates an expected call of OnMetricsReceive.
func (mr *MockCpiInterfaceServerMockRecorder) OnMetricsReceive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMetricsReceive", reflect.TypeOf((*MockCpiInterfaceServer)(nil).OnMetricsReceive), arg0, arg1)
}

// RegisterDataplane mocks base method.
func (m *MockCpiInterfaceServer) RegisterDataplane(arg0 context.Context, arg1 *proto.DataplaneInfo) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDataplane", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDataplane indicates an expected call of RegisterDataplane.
func (mr *MockCpiInterfaceServerMockRecorder) RegisterDataplane(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDataplane", reflect.TypeOf((*MockCpiInterfaceServer)(nil).RegisterDataplane), arg0, arg1)
}

// RegisterNode mocks base method.
func (m *MockCpiInterfaceServer) RegisterNode(arg0 context.Context, arg1 *proto.NodeInfo) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNode", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNode indicates an expected call of RegisterNode.
func (mr *MockCpiInterfaceServerMockRecorder) RegisterNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNode", reflect.TypeOf((*MockCpiInterfaceServer)(nil).RegisterNode), arg0, arg1)
}

// RegisterService mocks base method.
func (m *MockCpiInterfaceServer) RegisterService(arg0 context.Context, arg1 *proto.ServiceInfo) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterService", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockCpiInterfaceServerMockRecorder) RegisterService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockCpiInterfaceServer)(nil).RegisterService), arg0, arg1)
}

// ReportFailure mocks base method.
func (m *MockCpiInterfaceServer) ReportFailure(arg0 context.Context, arg1 *proto.Failure) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportFailure", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportFailure indicates an expected call of ReportFailure.
func (mr *MockCpiInterfaceServerMockRecorder) ReportFailure(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportFailure", reflect.TypeOf((*MockCpiInterfaceServer)(nil).ReportFailure), arg0, arg1)
}

// RequestVote mocks base method.
func (m *MockCpiInterfaceServer) RequestVote(arg0 context.Context, arg1 *proto.RequestVoteArgs) (*proto.RequestVoteReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVote", arg0, arg1)
	ret0, _ := ret[0].(*proto.RequestVoteReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVote indicates an expected call of RequestVote.
func (mr *MockCpiInterfaceServerMockRecorder) RequestVote(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVote", reflect.TypeOf((*MockCpiInterfaceServer)(nil).RequestVote), arg0, arg1)
}

// ResetMeasurements mocks base method.
func (m *MockCpiInterfaceServer) ResetMeasurements(arg0 context.Context, arg1 *emptypb.Empty) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetMeasurements", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetMeasurements indicates an expected call of ResetMeasurements.
func (mr *MockCpiInterfaceServerMockRecorder) ResetMeasurements(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMeasurements", reflect.TypeOf((*MockCpiInterfaceServer)(nil).ResetMeasurements), arg0, arg1)
}

// ReviseHAProxyConfiguration mocks base method.
func (m *MockCpiInterfaceServer) ReviseHAProxyConfiguration(arg0 context.Context, arg1 *proto.HAProxyConfig) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviseHAProxyConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReviseHAProxyConfiguration indicates an expected call of ReviseHAProxyConfiguration.
func (mr *MockCpiInterfaceServerMockRecorder) ReviseHAProxyConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviseHAProxyConfiguration", reflect.TypeOf((*MockCpiInterfaceServer)(nil).ReviseHAProxyConfiguration), arg0, arg1)
}

// SendMetricsToPredictiveAutoscaler mocks base method.
func (m *MockCpiInterfaceServer) SendMetricsToPredictiveAutoscaler(arg0 context.Context, arg1 *proto.MetricsPredictiveAutoscaler) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetricsToPredictiveAutoscaler", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetricsToPredictiveAutoscaler indicates an expected call of SendMetricsToPredictiveAutoscaler.
func (mr *MockCpiInterfaceServerMockRecorder) SendMetricsToPredictiveAutoscaler(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricsToPredictiveAutoscaler", reflect.TypeOf((*MockCpiInterfaceServer)(nil).SendMetricsToPredictiveAutoscaler), arg0, arg1)
}

// mustEmbedUnimplementedCpiInterfaceServer mocks base method.
func (m *MockCpiInterfaceServer) mustEmbedUnimplementedCpiInterfaceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCpiInterfaceServer")
}

// mustEmbedUnimplementedCpiInterfaceServer indicates an expected call of mustEmbedUnimplementedCpiInterfaceServer.
func (mr *MockCpiInterfaceServerMockRecorder) mustEmbedUnimplementedCpiInterfaceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCpiInterfaceServer", reflect.TypeOf((*MockCpiInterfaceServer)(nil).mustEmbedUnimplementedCpiInterfaceServer))
}

// MockUnsafeCpiInterfaceServer is a mock of UnsafeCpiInterfaceServer interface.
type MockUnsafeCpiInterfaceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCpiInterfaceServerMockRecorder
}

// MockUnsafeCpiInterfaceServerMockRecorder is the mock recorder for MockUnsafeCpiInterfaceServer.
type MockUnsafeCpiInterfaceServerMockRecorder struct {
	mock *MockUnsafeCpiInterfaceServer
}

// NewMockUnsafeCpiInterfaceServer creates a new mock instance.
func NewMockUnsafeCpiInterfaceServer(ctrl *gomock.Controller) *MockUnsafeCpiInterfaceServer {
	mock := &MockUnsafeCpiInterfaceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCpiInterfaceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCpiInterfaceServer) EXPECT() *MockUnsafeCpiInterfaceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCpiInterfaceServer mocks base method.
func (m *MockUnsafeCpiInterfaceServer) mustEmbedUnimplementedCpiInterfaceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCpiInterfaceServer")
}

// mustEmbedUnimplementedCpiInterfaceServer indicates an expected call of mustEmbedUnimplementedCpiInterfaceServer.
func (mr *MockUnsafeCpiInterfaceServerMockRecorder) mustEmbedUnimplementedCpiInterfaceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCpiInterfaceServer", reflect.TypeOf((*MockUnsafeCpiInterfaceServer)(nil).mustEmbedUnimplementedCpiInterfaceServer))
}
