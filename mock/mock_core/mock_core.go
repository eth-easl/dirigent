// Code generated by MockGen. DO NOT EDIT.
// Source: internal/control_plane/core/interface.go

// Package mock_core is a generated GoMock package.
package mock_core

import (
	proto "cluster_manager/api/proto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockDataPlaneInterface is a mock of DataPlaneInterface interface.
type MockDataPlaneInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataPlaneInterfaceMockRecorder
}

// MockDataPlaneInterfaceMockRecorder is the mock recorder for MockDataPlaneInterface.
type MockDataPlaneInterfaceMockRecorder struct {
	mock *MockDataPlaneInterface
}

// NewMockDataPlaneInterface creates a new mock instance.
func NewMockDataPlaneInterface(ctrl *gomock.Controller) *MockDataPlaneInterface {
	mock := &MockDataPlaneInterface{ctrl: ctrl}
	mock.recorder = &MockDataPlaneInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataPlaneInterface) EXPECT() *MockDataPlaneInterfaceMockRecorder {
	return m.recorder
}

// AddDeployment mocks base method.
func (m *MockDataPlaneInterface) AddDeployment(arg0 context.Context, arg1 *proto.ServiceInfo) (*proto.DeploymentUpdateSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeployment", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeploymentUpdateSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDeployment indicates an expected call of AddDeployment.
func (mr *MockDataPlaneInterfaceMockRecorder) AddDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeployment", reflect.TypeOf((*MockDataPlaneInterface)(nil).AddDeployment), arg0, arg1)
}

// DeleteDeployment mocks base method.
func (m *MockDataPlaneInterface) DeleteDeployment(arg0 context.Context, arg1 *proto.ServiceInfo) (*proto.DeploymentUpdateSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeploymentUpdateSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockDataPlaneInterfaceMockRecorder) DeleteDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockDataPlaneInterface)(nil).DeleteDeployment), arg0, arg1)
}

// GetApiPort mocks base method.
func (m *MockDataPlaneInterface) GetApiPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetApiPort indicates an expected call of GetApiPort.
func (mr *MockDataPlaneInterfaceMockRecorder) GetApiPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiPort", reflect.TypeOf((*MockDataPlaneInterface)(nil).GetApiPort))
}

// GetIP mocks base method.
func (m *MockDataPlaneInterface) GetIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIP indicates an expected call of GetIP.
func (mr *MockDataPlaneInterfaceMockRecorder) GetIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockDataPlaneInterface)(nil).GetIP))
}

// GetProxyPort mocks base method.
func (m *MockDataPlaneInterface) GetProxyPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxyPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProxyPort indicates an expected call of GetProxyPort.
func (mr *MockDataPlaneInterfaceMockRecorder) GetProxyPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxyPort", reflect.TypeOf((*MockDataPlaneInterface)(nil).GetProxyPort))
}

// InitializeDataPlaneConnection mocks base method.
func (m *MockDataPlaneInterface) InitializeDataPlaneConnection(host, port string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeDataPlaneConnection", host, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeDataPlaneConnection indicates an expected call of InitializeDataPlaneConnection.
func (mr *MockDataPlaneInterfaceMockRecorder) InitializeDataPlaneConnection(host, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeDataPlaneConnection", reflect.TypeOf((*MockDataPlaneInterface)(nil).InitializeDataPlaneConnection), host, port)
}

// ResetMeasurements mocks base method.
func (m *MockDataPlaneInterface) ResetMeasurements(arg0 context.Context, arg1 *emptypb.Empty) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetMeasurements", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetMeasurements indicates an expected call of ResetMeasurements.
func (mr *MockDataPlaneInterfaceMockRecorder) ResetMeasurements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMeasurements", reflect.TypeOf((*MockDataPlaneInterface)(nil).ResetMeasurements), arg0, arg1)
}

// UpdateEndpointList mocks base method.
func (m *MockDataPlaneInterface) UpdateEndpointList(arg0 context.Context, arg1 *proto.DeploymentEndpointPatch) (*proto.DeploymentUpdateSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointList", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeploymentUpdateSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointList indicates an expected call of UpdateEndpointList.
func (mr *MockDataPlaneInterfaceMockRecorder) UpdateEndpointList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointList", reflect.TypeOf((*MockDataPlaneInterface)(nil).UpdateEndpointList), arg0, arg1)
}
