// Code generated by MockGen. DO NOT EDIT.
// Source: internal/control_plane/control_plane/core/interface.go
//
// Generated by this command:
//
//	mockgen -source internal/control_plane/control_plane/core/interface.go
//

// Package mock_core is a generated GoMock package.
package mock_core

import (
	core "cluster_manager/internal/control_plane/control_plane/core"
	synchronization "cluster_manager/pkg/synchronization"
	proto "cluster_manager/proto"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockDataPlaneInterface is a mock of DataPlaneInterface interface.
type MockDataPlaneInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataPlaneInterfaceMockRecorder
	isgomock struct{}
}

// MockDataPlaneInterfaceMockRecorder is the mock recorder for MockDataPlaneInterface.
type MockDataPlaneInterfaceMockRecorder struct {
	mock *MockDataPlaneInterface
}

// NewMockDataPlaneInterface creates a new mock instance.
func NewMockDataPlaneInterface(ctrl *gomock.Controller) *MockDataPlaneInterface {
	mock := &MockDataPlaneInterface{ctrl: ctrl}
	mock.recorder = &MockDataPlaneInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataPlaneInterface) EXPECT() *MockDataPlaneInterfaceMockRecorder {
	return m.recorder
}

// AddDeployment mocks base method.
func (m *MockDataPlaneInterface) AddDeployment(arg0 context.Context, arg1 *proto.ServiceInfo) (*proto.DeploymentUpdateSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeployment", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeploymentUpdateSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDeployment indicates an expected call of AddDeployment.
func (mr *MockDataPlaneInterfaceMockRecorder) AddDeployment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeployment", reflect.TypeOf((*MockDataPlaneInterface)(nil).AddDeployment), arg0, arg1)
}

// AddWorkflowDeployment mocks base method.
func (m *MockDataPlaneInterface) AddWorkflowDeployment(arg0 context.Context, arg1 *proto.WorkflowInfo) (*proto.DeploymentUpdateSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowDeployment", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeploymentUpdateSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWorkflowDeployment indicates an expected call of AddWorkflowDeployment.
func (mr *MockDataPlaneInterfaceMockRecorder) AddWorkflowDeployment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowDeployment", reflect.TypeOf((*MockDataPlaneInterface)(nil).AddWorkflowDeployment), arg0, arg1)
}

// DeleteDeployment mocks base method.
func (m *MockDataPlaneInterface) DeleteDeployment(arg0 context.Context, arg1 *proto.ServiceInfo) (*proto.DeploymentUpdateSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeploymentUpdateSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockDataPlaneInterfaceMockRecorder) DeleteDeployment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockDataPlaneInterface)(nil).DeleteDeployment), arg0, arg1)
}

// DeleteWorkflowDeployment mocks base method.
func (m *MockDataPlaneInterface) DeleteWorkflowDeployment(arg0 context.Context, arg1 *proto.WorkflowObjectIdentifier) (*proto.DeploymentUpdateSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowDeployment", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeploymentUpdateSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowDeployment indicates an expected call of DeleteWorkflowDeployment.
func (mr *MockDataPlaneInterfaceMockRecorder) DeleteWorkflowDeployment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowDeployment", reflect.TypeOf((*MockDataPlaneInterface)(nil).DeleteWorkflowDeployment), arg0, arg1)
}

// DrainSandbox mocks base method.
func (m *MockDataPlaneInterface) DrainSandbox(arg0 context.Context, arg1 *proto.DeploymentEndpointPatch) (*proto.DeploymentUpdateSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrainSandbox", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeploymentUpdateSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrainSandbox indicates an expected call of DrainSandbox.
func (mr *MockDataPlaneInterfaceMockRecorder) DrainSandbox(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrainSandbox", reflect.TypeOf((*MockDataPlaneInterface)(nil).DrainSandbox), arg0, arg1)
}

// GetApiPort mocks base method.
func (m *MockDataPlaneInterface) GetApiPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetApiPort indicates an expected call of GetApiPort.
func (mr *MockDataPlaneInterfaceMockRecorder) GetApiPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiPort", reflect.TypeOf((*MockDataPlaneInterface)(nil).GetApiPort))
}

// GetIP mocks base method.
func (m *MockDataPlaneInterface) GetIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIP indicates an expected call of GetIP.
func (mr *MockDataPlaneInterfaceMockRecorder) GetIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockDataPlaneInterface)(nil).GetIP))
}

// GetLastHeartBeat mocks base method.
func (m *MockDataPlaneInterface) GetLastHeartBeat() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastHeartBeat")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastHeartBeat indicates an expected call of GetLastHeartBeat.
func (mr *MockDataPlaneInterfaceMockRecorder) GetLastHeartBeat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastHeartBeat", reflect.TypeOf((*MockDataPlaneInterface)(nil).GetLastHeartBeat))
}

// GetProxyPort mocks base method.
func (m *MockDataPlaneInterface) GetProxyPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxyPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProxyPort indicates an expected call of GetProxyPort.
func (mr *MockDataPlaneInterfaceMockRecorder) GetProxyPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxyPort", reflect.TypeOf((*MockDataPlaneInterface)(nil).GetProxyPort))
}

// InitializeDataPlaneConnection mocks base method.
func (m *MockDataPlaneInterface) InitializeDataPlaneConnection(host, port string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeDataPlaneConnection", host, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeDataPlaneConnection indicates an expected call of InitializeDataPlaneConnection.
func (mr *MockDataPlaneInterfaceMockRecorder) InitializeDataPlaneConnection(host, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeDataPlaneConnection", reflect.TypeOf((*MockDataPlaneInterface)(nil).InitializeDataPlaneConnection), host, port)
}

// ReceiveRouteUpdate mocks base method.
func (m *MockDataPlaneInterface) ReceiveRouteUpdate(arg0 context.Context, arg1 *proto.RouteUpdate, arg2 ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReceiveRouteUpdate", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveRouteUpdate indicates an expected call of ReceiveRouteUpdate.
func (mr *MockDataPlaneInterfaceMockRecorder) ReceiveRouteUpdate(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveRouteUpdate", reflect.TypeOf((*MockDataPlaneInterface)(nil).ReceiveRouteUpdate), varargs...)
}

// ResetMeasurements mocks base method.
func (m *MockDataPlaneInterface) ResetMeasurements(arg0 context.Context, arg1 *emptypb.Empty) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetMeasurements", arg0, arg1)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetMeasurements indicates an expected call of ResetMeasurements.
func (mr *MockDataPlaneInterfaceMockRecorder) ResetMeasurements(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMeasurements", reflect.TypeOf((*MockDataPlaneInterface)(nil).ResetMeasurements), arg0, arg1)
}

// UpdateDeployment mocks base method.
func (m *MockDataPlaneInterface) UpdateDeployment(arg0 context.Context, arg1 *proto.ServiceInfo) (*proto.DeploymentUpdateSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployment", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeploymentUpdateSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeployment indicates an expected call of UpdateDeployment.
func (mr *MockDataPlaneInterfaceMockRecorder) UpdateDeployment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockDataPlaneInterface)(nil).UpdateDeployment), arg0, arg1)
}

// UpdateEndpointList mocks base method.
func (m *MockDataPlaneInterface) UpdateEndpointList(arg0 context.Context, arg1 *proto.DeploymentEndpointPatch) (*proto.DeploymentUpdateSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointList", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeploymentUpdateSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointList indicates an expected call of UpdateEndpointList.
func (mr *MockDataPlaneInterfaceMockRecorder) UpdateEndpointList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointList", reflect.TypeOf((*MockDataPlaneInterface)(nil).UpdateEndpointList), arg0, arg1)
}

// UpdateHeartBeat mocks base method.
func (m *MockDataPlaneInterface) UpdateHeartBeat() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateHeartBeat")
}

// UpdateHeartBeat indicates an expected call of UpdateHeartBeat.
func (mr *MockDataPlaneInterfaceMockRecorder) UpdateHeartBeat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeartBeat", reflect.TypeOf((*MockDataPlaneInterface)(nil).UpdateHeartBeat))
}

// MockWorkerNodeInterface is a mock of WorkerNodeInterface interface.
type MockWorkerNodeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerNodeInterfaceMockRecorder
	isgomock struct{}
}

// MockWorkerNodeInterfaceMockRecorder is the mock recorder for MockWorkerNodeInterface.
type MockWorkerNodeInterfaceMockRecorder struct {
	mock *MockWorkerNodeInterface
}

// NewMockWorkerNodeInterface creates a new mock instance.
func NewMockWorkerNodeInterface(ctrl *gomock.Controller) *MockWorkerNodeInterface {
	mock := &MockWorkerNodeInterface{ctrl: ctrl}
	mock.recorder = &MockWorkerNodeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerNodeInterface) EXPECT() *MockWorkerNodeInterfaceMockRecorder {
	return m.recorder
}

// AddImage mocks base method.
func (m *MockWorkerNodeInterface) AddImage(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddImage indicates an expected call of AddImage.
func (mr *MockWorkerNodeInterfaceMockRecorder) AddImage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockWorkerNodeInterface)(nil).AddImage), arg0)
}

// AddUsage mocks base method.
func (m *MockWorkerNodeInterface) AddUsage(cpu, memory uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUsage", cpu, memory)
}

// AddUsage indicates an expected call of AddUsage.
func (mr *MockWorkerNodeInterfaceMockRecorder) AddUsage(cpu, memory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsage", reflect.TypeOf((*MockWorkerNodeInterface)(nil).AddUsage), cpu, memory)
}

// ConnectToWorker mocks base method.
func (m *MockWorkerNodeInterface) ConnectToWorker() proto.WorkerNodeInterfaceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToWorker")
	ret0, _ := ret[0].(proto.WorkerNodeInterfaceClient)
	return ret0
}

// ConnectToWorker indicates an expected call of ConnectToWorker.
func (mr *MockWorkerNodeInterfaceMockRecorder) ConnectToWorker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToWorker", reflect.TypeOf((*MockWorkerNodeInterface)(nil).ConnectToWorker))
}

// CreateSandbox mocks base method.
func (m *MockWorkerNodeInterface) CreateSandbox(arg0 context.Context, arg1 *proto.ServiceInfo, arg2 ...grpc.CallOption) (*proto.SandboxCreationStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSandbox", varargs...)
	ret0, _ := ret[0].(*proto.SandboxCreationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSandbox indicates an expected call of CreateSandbox.
func (mr *MockWorkerNodeInterfaceMockRecorder) CreateSandbox(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSandbox", reflect.TypeOf((*MockWorkerNodeInterface)(nil).CreateSandbox), varargs...)
}

// CreateTaskSandbox mocks base method.
func (m *MockWorkerNodeInterface) CreateTaskSandbox(arg0 context.Context, arg1 *proto.WorkflowTaskInfo, arg2 ...grpc.CallOption) (*proto.SandboxCreationStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTaskSandbox", varargs...)
	ret0, _ := ret[0].(*proto.SandboxCreationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskSandbox indicates an expected call of CreateTaskSandbox.
func (mr *MockWorkerNodeInterfaceMockRecorder) CreateTaskSandbox(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskSandbox", reflect.TypeOf((*MockWorkerNodeInterface)(nil).CreateTaskSandbox), varargs...)
}

// DeleteSandbox mocks base method.
func (m *MockWorkerNodeInterface) DeleteSandbox(arg0 context.Context, arg1 *proto.SandboxID, arg2 ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSandbox", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSandbox indicates an expected call of DeleteSandbox.
func (mr *MockWorkerNodeInterfaceMockRecorder) DeleteSandbox(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSandbox", reflect.TypeOf((*MockWorkerNodeInterface)(nil).DeleteSandbox), varargs...)
}

// GetCIDR mocks base method.
func (m *MockWorkerNodeInterface) GetCIDR() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCIDR")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCIDR indicates an expected call of GetCIDR.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetCIDR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCIDR", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetCIDR))
}

// GetCpuAvailable mocks base method.
func (m *MockWorkerNodeInterface) GetCpuAvailable() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuAvailable")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCpuAvailable indicates an expected call of GetCpuAvailable.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetCpuAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuAvailable", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetCpuAvailable))
}

// GetCpuUsed mocks base method.
func (m *MockWorkerNodeInterface) GetCpuUsed() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuUsed")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCpuUsed indicates an expected call of GetCpuUsed.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetCpuUsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuUsed", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetCpuUsed))
}

// GetEndpointMap mocks base method.
func (m *MockWorkerNodeInterface) GetEndpointMap() synchronization.SyncStructure[*core.Endpoint, string] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointMap")
	ret0, _ := ret[0].(synchronization.SyncStructure[*core.Endpoint, string])
	return ret0
}

// GetEndpointMap indicates an expected call of GetEndpointMap.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetEndpointMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointMap", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetEndpointMap))
}

// GetIP mocks base method.
func (m *MockWorkerNodeInterface) GetIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIP indicates an expected call of GetIP.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetIP))
}

// GetLastHeartBeat mocks base method.
func (m *MockWorkerNodeInterface) GetLastHeartBeat() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastHeartBeat")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastHeartBeat indicates an expected call of GetLastHeartBeat.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetLastHeartBeat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastHeartBeat", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetLastHeartBeat))
}

// GetMemoryAvailable mocks base method.
func (m *MockWorkerNodeInterface) GetMemoryAvailable() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryAvailable")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMemoryAvailable indicates an expected call of GetMemoryAvailable.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetMemoryAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryAvailable", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetMemoryAvailable))
}

// GetMemoryUsed mocks base method.
func (m *MockWorkerNodeInterface) GetMemoryUsed() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryUsed")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMemoryUsed indicates an expected call of GetMemoryUsed.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetMemoryUsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryUsed", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetMemoryUsed))
}

// GetName mocks base method.
func (m *MockWorkerNodeInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetName))
}

// GetPort mocks base method.
func (m *MockWorkerNodeInterface) GetPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetPort))
}

// GetSchedulability mocks base method.
func (m *MockWorkerNodeInterface) GetSchedulability() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedulability")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetSchedulability indicates an expected call of GetSchedulability.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetSchedulability() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedulability", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetSchedulability))
}

// GetWorkerNodeConfiguration mocks base method.
func (m *MockWorkerNodeInterface) GetWorkerNodeConfiguration() core.WorkerNodeConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerNodeConfiguration")
	ret0, _ := ret[0].(core.WorkerNodeConfiguration)
	return ret0
}

// GetWorkerNodeConfiguration indicates an expected call of GetWorkerNodeConfiguration.
func (mr *MockWorkerNodeInterfaceMockRecorder) GetWorkerNodeConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerNodeConfiguration", reflect.TypeOf((*MockWorkerNodeInterface)(nil).GetWorkerNodeConfiguration))
}

// HasImage mocks base method.
func (m *MockWorkerNodeInterface) HasImage(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasImage", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasImage indicates an expected call of HasImage.
func (mr *MockWorkerNodeInterfaceMockRecorder) HasImage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasImage", reflect.TypeOf((*MockWorkerNodeInterface)(nil).HasImage), arg0)
}

// ListEndpoints mocks base method.
func (m *MockWorkerNodeInterface) ListEndpoints(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*proto.EndpointsList, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpoints", varargs...)
	ret0, _ := ret[0].(*proto.EndpointsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpoints indicates an expected call of ListEndpoints.
func (mr *MockWorkerNodeInterfaceMockRecorder) ListEndpoints(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpoints", reflect.TypeOf((*MockWorkerNodeInterface)(nil).ListEndpoints), varargs...)
}

// PrepullImage mocks base method.
func (m *MockWorkerNodeInterface) PrepullImage(arg0 context.Context, arg1 *proto.ImageInfo, arg2 ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepullImage", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepullImage indicates an expected call of PrepullImage.
func (mr *MockWorkerNodeInterfaceMockRecorder) PrepullImage(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepullImage", reflect.TypeOf((*MockWorkerNodeInterface)(nil).PrepullImage), varargs...)
}

// ReceiveRouteUpdate mocks base method.
func (m *MockWorkerNodeInterface) ReceiveRouteUpdate(arg0 context.Context, arg1 *proto.RouteUpdate, arg2 ...grpc.CallOption) (*proto.ActionStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReceiveRouteUpdate", varargs...)
	ret0, _ := ret[0].(*proto.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveRouteUpdate indicates an expected call of ReceiveRouteUpdate.
func (mr *MockWorkerNodeInterfaceMockRecorder) ReceiveRouteUpdate(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveRouteUpdate", reflect.TypeOf((*MockWorkerNodeInterface)(nil).ReceiveRouteUpdate), varargs...)
}

// RemoveImage mocks base method.
func (m *MockWorkerNodeInterface) RemoveImage(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImage", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveImage indicates an expected call of RemoveImage.
func (mr *MockWorkerNodeInterfaceMockRecorder) RemoveImage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockWorkerNodeInterface)(nil).RemoveImage), arg0)
}

// SetCpuUsed mocks base method.
func (m *MockWorkerNodeInterface) SetCpuUsed(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCpuUsed", arg0)
}

// SetCpuUsed indicates an expected call of SetCpuUsed.
func (mr *MockWorkerNodeInterfaceMockRecorder) SetCpuUsed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCpuUsed", reflect.TypeOf((*MockWorkerNodeInterface)(nil).SetCpuUsed), arg0)
}

// SetMemoryUsed mocks base method.
func (m *MockWorkerNodeInterface) SetMemoryUsed(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMemoryUsed", arg0)
}

// SetMemoryUsed indicates an expected call of SetMemoryUsed.
func (mr *MockWorkerNodeInterfaceMockRecorder) SetMemoryUsed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemoryUsed", reflect.TypeOf((*MockWorkerNodeInterface)(nil).SetMemoryUsed), arg0)
}

// SetSchedulability mocks base method.
func (m *MockWorkerNodeInterface) SetSchedulability(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSchedulability", arg0)
}

// SetSchedulability indicates an expected call of SetSchedulability.
func (mr *MockWorkerNodeInterfaceMockRecorder) SetSchedulability(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchedulability", reflect.TypeOf((*MockWorkerNodeInterface)(nil).SetSchedulability), arg0)
}

// UpdateLastHearBeat mocks base method.
func (m *MockWorkerNodeInterface) UpdateLastHearBeat() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateLastHearBeat")
}

// UpdateLastHearBeat indicates an expected call of UpdateLastHearBeat.
func (mr *MockWorkerNodeInterfaceMockRecorder) UpdateLastHearBeat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastHearBeat", reflect.TypeOf((*MockWorkerNodeInterface)(nil).UpdateLastHearBeat))
}

// MockAutoscalingInterface is a mock of AutoscalingInterface interface.
type MockAutoscalingInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAutoscalingInterfaceMockRecorder
	isgomock struct{}
}

// MockAutoscalingInterfaceMockRecorder is the mock recorder for MockAutoscalingInterface.
type MockAutoscalingInterfaceMockRecorder struct {
	mock *MockAutoscalingInterface
}

// NewMockAutoscalingInterface creates a new mock instance.
func NewMockAutoscalingInterface(ctrl *gomock.Controller) *MockAutoscalingInterface {
	mock := &MockAutoscalingInterface{ctrl: ctrl}
	mock.recorder = &MockAutoscalingInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutoscalingInterface) EXPECT() *MockAutoscalingInterfaceMockRecorder {
	return m.recorder
}

// PanicPoke mocks base method.
func (m *MockAutoscalingInterface) PanicPoke(functionName string, previousValue int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PanicPoke", functionName, previousValue)
}

// PanicPoke indicates an expected call of PanicPoke.
func (mr *MockAutoscalingInterfaceMockRecorder) PanicPoke(functionName, previousValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PanicPoke", reflect.TypeOf((*MockAutoscalingInterface)(nil).PanicPoke), functionName, previousValue)
}

// Poke mocks base method.
func (m *MockAutoscalingInterface) Poke(functionName string, previousValue int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Poke", functionName, previousValue)
}

// Poke indicates an expected call of Poke.
func (mr *MockAutoscalingInterfaceMockRecorder) Poke(functionName, previousValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poke", reflect.TypeOf((*MockAutoscalingInterface)(nil).Poke), functionName, previousValue)
}

// Stop mocks base method.
func (m *MockAutoscalingInterface) Stop(functionName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", functionName)
}

// Stop indicates an expected call of Stop.
func (mr *MockAutoscalingInterfaceMockRecorder) Stop(functionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAutoscalingInterface)(nil).Stop), functionName)
}
